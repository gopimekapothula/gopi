import re
import csv
import os
from collections import defaultdict
from typing import Dict, List, Tuple

class LogAnalyzer:
    def __init__(self, log_file_path: str, failed_login_threshold: int = 10):
        """
        Initialize the LogAnalyzer with configuration parameters.

        :param log_file_path: Path to the log file
        :param failed_login_threshold: Number of failed login attempts to flag as suspicious
        """
        # Ensure the log file exists, create if it doesn't
        self.log_file_path = self.ensure_log_file(log_file_path)
        self.failed_login_threshold = failed_login_threshold

        # Data storage
        self.ip_request_counts = defaultdict(int)
        self.endpoint_access_counts = defaultdict(int)
        self.failed_login_attempts = defaultdict(int)
        self.most_accessed_endpoint = None

    def ensure_log_file(self, log_file_path: str) -> str:
        """
        Ensure the log file exists, create a sample log if it doesn't.

        :param log_file_path: Proposed log file path
        :return: Verified log file path
        """
        # Sample log content if file doesn't exist
        sample_log_content = """192.168.1.1 - - [03/Dec/2024:10:12:34 +0000] "GET /home HTTP/1.1" 200 512
203.0.113.5 - - [03/Dec/2024:10:12:35 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
10.0.0.2 - - [03/Dec/2024:10:12:36 +0000] "GET /about HTTP/1.1" 200 256
192.168.1.1 - - [03/Dec/2024:10:12:37 +0000] "GET /contact HTTP/1.1" 200 312
198.51.100.23 - - [03/Dec/2024:10:12:38 +0000] "POST /register HTTP/1.1" 200 128
203.0.113.5 - - [03/Dec/2024:10:12:39 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
192.168.1.100 - - [03/Dec/2024:10:12:40 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
10.0.0.2 - - [03/Dec/2024:10:12:41 +0000] "GET /dashboard HTTP/1.1" 200 1024
198.51.100.23 - - [03/Dec/2024:10:12:42 +0000] "GET /about HTTP/1.1" 200 256
192.168.1.1 - - [03/Dec/2024:10:12:43 +0000] "GET /dashboard HTTP/1.1" 200 1024
203.0.113.5 - - [03/Dec/2024:10:12:44 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
203.0.113.5 - - [03/Dec/2024:10:12:45 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
192.168.1.100 - - [03/Dec/2024:10:12:46 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
10.0.0.2 - - [03/Dec/2024:10:12:47 +0000] "GET /profile HTTP/1.1" 200 768
192.168.1.1 - - [03/Dec/2024:10:12:48 +0000] "GET /home HTTP/1.1" 200 512
198.51.100.23 - - [03/Dec/2024:10:12:49 +0000] "POST /feedback HTTP/1.1" 200 128
203.0.113.5 - - [03/Dec/2024:10:12:50 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
192.168.1.1 - - [03/Dec/2024:10:12:51 +0000] "GET /home HTTP/1.1" 200 512
198.51.100.23 - - [03/Dec/2024:10:12:52 +0000] "GET /about HTTP/1.1" 200 256
203.0.113.5 - - [03/Dec/2024:10:12:53 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
192.168.1.100 - - [03/Dec/2024:10:12:54 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
10.0.0.2 - - [03/Dec/2024:10:12:55 +0000] "GET /contact HTTP/1.1" 200 512
198.51.100.23 - - [03/Dec/2024:10:12:56 +0000] "GET /home HTTP/1.1" 200 512
192.168.1.100 - - [03/Dec/2024:10:12:57 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
203.0.113.5 - - [03/Dec/2024:10:12:58 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
10.0.0.2 - - [03/Dec/2024:10:12:59 +0000] "GET /dashboard HTTP/1.1" 200 1024
192.168.1.1 - - [03/Dec/2024:10:13:00 +0000] "GET /about HTTP/1.1" 200 256
198.51.100.23 - - [03/Dec/2024:10:13:01 +0000] "POST /register HTTP/1.1" 200 128
203.0.113.5 - - [03/Dec/2024:10:13:02 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
192.168.1.100 - - [03/Dec/2024:10:13:03 +0000] "POST /login HTTP/1.1" 401 128 "Invalid credentials"
10.0.0.2 - - [03/Dec/2024:10:13:04 +0000] "GET /profile HTTP/1.1" 200 768
198.51.100.23 - - [03/Dec/2024:10:13:05 +0000] "GET /about HTTP/1.1" 200 256
192.168.1.1 - - [03/Dec/2024:10:13:06 +0000] "GET /home HTTP/1.1" 200 512
198.51.100.23 - - [03/Dec/2024:10:13:07 +0000] "POST /feedback HTTP/1.1" 200 128"""

        # If file doesn't exist, create it with sample content
        if not os.path.exists(log_file_path):
            print(f"Log file {log_file_path} not found. Creating a sample log file.")
            try:
                with open(log_file_path, 'w') as file:
                    file.write(sample_log_content)
                print(f"Sample log file created at {log_file_path}")
            except Exception as e:
                print(f"Error creating log file: {e}")
                # Fallback to using current directory
                log_file_path = 'sample.log'
                with open(log_file_path, 'w') as file:
                    file.write(sample_log_content)

        return log_file_path

    def parse_log_file(self):
        """
        Parse the log file and extract relevant information.
        """
        try:
            with open(self.log_file_path, 'r') as file:
                for line in file:
                    # IP Address extraction
                    ip_match = re.match(r'^(\d+\.\d+\.\d+\.\d+)', line)
                    if ip_match:
                        ip_address = ip_match.group(1)
                        self.ip_request_counts[ip_address] += 1

                    # Endpoint extraction
                    endpoint_match = re.search(r'"[A-Z]+ (/[^\s]+)', line)
                    if endpoint_match:
                        endpoint = endpoint_match.group(1)
                        self.endpoint_access_counts[endpoint] += 1

                    # Failed login detection
                    if "401" in line and "Invalid credentials" in line:
                        self.failed_login_attempts[ip_address] += 1

            # Find most accessed endpoint
            self.most_accessed_endpoint = max(
                self.endpoint_access_counts.items(),
                key=lambda x: x[1]
            )

        except Exception as e:
            print(f"Error parsing log file: {e}")
            return False

        return True

    def get_top_ip_requests(self) -> List[Tuple[str, int]]:
        """
        Get IP addresses sorted by request count in descending order.

        :return: Sorted list of (IP, request_count) tuples
        """
        return sorted(
            self.ip_request_counts.items(),
            key=lambda x: x[1],
            reverse=True
        )

    def get_suspicious_ips(self) -> List[Tuple[str, int]]:
        """
        Identify IPs with failed login attempts exceeding the threshold.

        :return: List of (IP, failed_login_count) tuples
        """
        return [
            (ip, count)
            for ip, count in self.failed_login_attempts.items()
            if count > self.failed_login_threshold
        ]

    def save_results_to_csv(self):
        """
        Save analysis results to a CSV file.
        """
        try:
            with open('log_analysis_results.csv', 'w', newline='') as csvfile:
                csv_writer = csv.writer(csvfile)

                # IP Requests Section
                csv_writer.writerow(['Requests per IP'])
                csv_writer.writerow(['IP Address', 'Request Count'])
                for ip, count in self.get_top_ip_requests():
                    csv_writer.writerow([ip, count])

                csv_writer.writerow([])  # Empty row for readability

                # Most Accessed Endpoint Section
                csv_writer.writerow(['Most Accessed Endpoint'])
                csv_writer.writerow(['Endpoint', 'Access Count'])
                csv_writer.writerow([
                    self.most_accessed_endpoint[0],
                    self.most_accessed_endpoint[1]
                ])

                csv_writer.writerow([])  # Empty row for readability

                # Suspicious Activity Section
                csv_writer.writerow(['Suspicious Activity'])
                csv_writer.writerow(['IP Address', 'Failed Login Count'])
                for ip, count in self.get_suspicious_ips():
                    csv_writer.writerow([ip, count])

            print("Results saved to log_analysis_results.csv")
        except Exception as e:
            print(f"Error saving results to CSV: {e}")

    def display_results(self):
        """
        Display analysis results in the terminal.
        """
        print("\n--- Log Analysis Results ---\n")

        # IP Requests
        print("Requests per IP Address:")
        print("{:<20} {:<15}".format("IP Address", "Request Count"))
        print("-" * 35)
        for ip, count in self.get_top_ip_requests():
            print("{:<20} {:<15}".format(ip, count))

        # Most Accessed Endpoint
        print("\nMost Frequently Accessed Endpoint:")
        print(f"{self.most_accessed_endpoint[0]} (Accessed {self.most_accessed_endpoint[1]} times)")

        # Suspicious Activity
        suspicious_ips = self.get_suspicious_ips()
        if suspicious_ips:
            print("\nSuspicious Activity Detected:")
            print("{:<20} {:<15}".format("IP Address", "Failed Login Attempts"))
            print("-" * 35)
            for ip, count in suspicious_ips:
                print("{:<20} {:<15}".format(ip, count))
        else:
            print("\nNo suspicious activity detected.")

    def run_analysis(self):
        """
        Execute the complete log file analysis.
        """
        # Parse log file
        if not self.parse_log_file():
            print("Analysis failed. Check the log file and try again.")
            return

        # Display results
        self.display_results()

        # Save to CSV
        self.save_results_to_csv()

def main():
    # Use current directory or specify a full path
    log_file_path = 'sample.log'

    # Print current working directory for debugging
    print("Current Working Directory:", os.getcwd())

    analyzer = LogAnalyzer(log_file_path)
    analyzer.run_analysis()

if __name__ == "__main__":
    main()
